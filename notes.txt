Chapter 2
    - get c compiler sudo apt-get install build-essential
    - to compile a c program: cc -std=c99 -Wall hello_world.c -o hello_world
    - to run a compiled c program: ./hello_world
 
Chapter 3
    - syntax and stuff
  
Chapter 4 Interactive prompt
    - sudo apt-get install libedit-dev
    - compiling with readline edit: cc -std=c99 -Wall prompt.c -ledit -o prompt
    - The C Preprocessor - will allow us to compile for different platforms
    - uses the # and ifdef to help with preprocessing comands
    
Chapter 5 Grammer and Such
    - use of mpc
  
Chapter 6 Parsing
    -Polish Notation
        - 1 + 2 + 6 is + 1 2 6
        - Operator always comes first in an expression, followed by either numbers or other expressions in parentheses
        - a program is an operator followed by one or more expressiohns
        - where an expression is either a numer, or, in parnentheses, an operator followed by one or more expressions
        - summary:
            -"Program" - the start of input, an "Operator", one or more "Expression", and the end of input
            - "Expression" - either a "Number" or '(', an "Operator", one or more "Expresion", and an ')'
            - "Operator" - '+', '-', '*', or '/'
            - "Number" - an optional '-', and one or more charaters between 0 and 9  
    -Regular Expressions
        - a way of writing gramer for small sections of text, such as words or numbers
        -examples:
            - .         Any Character is required
            - a         The character a is required
            - [abcdef]  Any Character in the set abcdef is required
            - [a-f]     Any character in the range a to f is required
            - a?        The character a is optional
            - a*        Zero or more of the character a are required
            - a+        One or more of the character a are required 
            - ^         The start of input is required
            - $         The end of input is required
            - /         Surrounds the regular expression in mpc
        - number rule in regular expression: /-?[0-9]+/
    -Installing mpc
        - Download mpc.h and mpc.c from repo
        - place in directory of source file
        - add '#include "mpc.h"' to sourcde file
        - linux/Mac compile: cc -std=c99 -Wall parsing.c mpc.c -ledit -lm -o parsing
        - windows compile: cc -std=c99 -Wall parsing.c mpc.c -o parsing
        
chapter 7 Evaluation
    - Trees
        - Abstract Syntax Tree - structure of the program based on the input entered by the user
        - Leaves are numbers and operators - the actual data to be processed
        - Branches are the rules used to produce this part of the tree - how to traveres and evaluate it
        - in mpc.h the stuct is called "mpc_ast_t"
            - typedef struct mpc_ast_t {
                char* tag;
                char* contents;
                mpc_state_t state;
                int children_num;
                struct mpc_ast_t** children;
              } mpc_ast_t;
            - because we got pointers to structs, to access fields in mpc_ast_t, you need to use '->' operator
    - recursion
         - use recursion to traverse the tree
         - int number_of_nodes(mpc_ast_t* t) {
            if (t->children_num == 0) {return 1;}
            if (t->children_num >= 1) {
                int total = 1;
                for (int i = 0; i < t->children_num; i++) {
                    total = total + number_of_nodes(t->children[1]);
                }
                return total;
            }
           }
    - Evaluation
        - use strcmp to check which operator to use
        - use strstr to check if it contains some substring
        - atoi to convert a char* to a long  
  
chapter 8 Error handling
    - A lisp can either evaluate to a number or error
    - handle this we'll use a struct call 'lval' (Lisp Value)
        typedef struct {
            int type;
            long num;
            int err;
        } lval;
    - Enumeration
        - use enum to know between type num and type error
        enum { LVAL_NUM, LVAL_ERR };
        - use enum to know the different errors
        enum { LERR_DIV_ZERO, LERR_BAD_OP, LERR_BAD_NUM };
    - Lisp Value Functions
        - Create 2 constructors for lval
        - one that creates a number lval
        - one that creates an error lval
        - use a switch statement to determine how to display lval
    - Evaluating Errors
        - during the operator evaluation, do a check for the errors
            - in the '/' do a check for divison by zero
            - if the operator is not defined, then return no operator error
        - during the evaluation check for long overflow
            - instead of using 'atoi' for the string to long conversion, use strtol
            - this will assign the variable 'errno' a value of 'ERANGE' if the value is overflowing the long
        - Just make sure to call the function to display the lval struct
    - Plumbing
        - Most of the code thus far has been plumbing code
        - In the next chapters we'll get into wirting the language!
        
Chapter 9 S-Expresions
    - Lists and Lisps
        - data and code are the same
        - S-Expression 
            - symbolic expression
            - the program internal structure will need to handle numbers, symbols, and other lists
    - Pointers
        - Function calling in C, arguments are always passed by value
        - pointers allow us to pass by reference. much faster
        - pointer is just a number that represents an address location
        - * used to declare a pointer
        - & used to get the address of a varable
        - * to get the value of a pointer variable
        - -> used to get a field from a struct that is a pointer
    - The Stack and the Heap
        - two sections of memory used for different tasks
        - Stack
            - memory where the program lives
            - all temporary variables, and data structures exsit
            - every time a functional call, a new area of the stack is set aside
            - all the work is done in the stack
        - Heap
            - memory for storage of objects with a longer lifespan
            - memory has to be manually alocated and dealocated
                - malloc and free
    - Parsing expressions
        - Now we'll use S-Expressions instead of polish notation
        - Use Symbol instead of Operator
        - Expression is now inclosed in S-Expression aka ()
    - Espression Structure
        - lval will need to handle symbols and s-expressions
        - s-expressions are variable length lists
            - so create a pointer to field 'cell' points to a list of lval*
            - need to keep track of how many lval* we have so 'count' field added
        - symbols and errors will be represented by strings
        typedef struct lval {
            int type;
            long num;
            char* err;
            char* sym;
            int count;
            struct lval** cell;
        } lval;
    - Constructors & Destructors
        - lval constuctors functions will now need to use malloc and sizeof to create the lval stuctures
        - When lval is constructed, its fields may contain pointers to other things on the heap
        - When lval is deleted, we need to use free to dealocate the space
        - Constructor example:
            lval* lval_num(long x) {
                lval* v = malloc(sizeof(lval));
                v->type = LVAL_NUM;
                v->num = x;
                return v;
            }
        - Destruction example will be in code
            - match every construction with a destruction to prevent memory leaks
    - Reading Expressions
        - first we read in the program
        - construct an lval* that represents it all
        - then evaluate the lval*
        - First Stage will convert the AST into an S-Expression
        - Second stage will evaluate the S-Expression
        - Head's up, in other LISP implemmentations, S-Expressions are represented by linked lists. 
            - This implementatino is an array list
            - for simplicity
    - Printing Expressions
        - to print an S-Expression loop over all the expressions in an S-Expression and print them seperated by space
    - Evaluatinf S-Expressions
        - Transform the lval* to another lval*
        - example in the code
        - don't forget to delete!
        
Chapter 10 Q-Expressions
    - Adding features to a language
        - Syntax - Add ne rule to the language grammer for this feature
        - Representation - add new data type variation to represent this feature
        - Parsing - Add new functions for reading this feature from the AST
        - Semantics - Add ne functions for evalutating and manipulating this feature
    - Q-Expression
        - Quoted Expressions
        - A lisp Expression that is not evaluated by standard Lisp mechanics
        - Represented by {} instead of ()
        - Macros in othe LISP languages
        - Add 'qexpr' to our language definition
    - Reading Q-Expressions
        - Add 'LVAL_QEXPR' Enum
        - Created a Qexpres constructor
        - modify deconstructor for Q-Expressions
        - No need to implement and evalutaion functions for Q-Expressions
    - Builtin Functions
        - Add new operators for manipulatinf Q-Expressions
            - list, head, tail, join, eval
            - Make them valid symbols in the language definiiotn
        - Add  
        
Chapter 11 Variables!
    - Immutabulity
        - variables will be immuatble
        - won't change
        - varibles allow us to name values, and then get a copy of that value
        - to allow for naming of values we need an environment
            - environment is structure which stores name and value of everything in program
            - a new environemnt starts at when a new interactive prompt is created
        - So what about re-assigning a name to something new
            - When we re-assign something, the old association will be deleted, and then a new one created
            - creates the illusion of mutability, but is still imutable
            - different from C, where the data that is pointed to by the variable is changed
    - Symbol Syntax
        - We need to update our symbol grammar to allow for symbols to be any character!
        - /[a-zA-Z0-9_+\\-*\\/\\\\=<>!&]+/
    - Function Pointers
        - because we now have varibles, symbols will no longer represent functions in our language (sad i know)
        - symbols will now represent a name for us to look up into our environment and get some value back.
        - need a new value to represent functions
            - a new type of lval to handle function pointers
    - Function Pointers
        - feature of C
        - allow you to store and pass around pointers to functions
        - use them to call the function they point to 
        - builtin functions will now have to handle an extra pointer to the environment lenv*
        - decalre a new function pointer type called lbuiltin
        - typedef lval*(*lbuiltin)(lenv*, lval*); 
            - "to get an lval* we dereference lbuiltin and call it with a lenv* and a lval*"
            - therefore lbuiltin must be a function pointer that takes an lenv* and a lval* and returns a lval*
            - that's some mighty BS*
    - Cyclic Types
        *lenv references builtin, and vice nersa
    - Function Type
        - new lval type LVAL_FUN
        - new constructor
            lval* lval_fun(lbuiltin func) {
                lval* v = malloc(sizeof(lval));
                v->type = LVAL_FUN;
                v->fun = func;
                return v;
            }
        - delete: case LVAL_FUN: break;
        - printing: case LVAL_FUN: printf("<function>"); break;
        - new function copying an lval
            - useful for putting things in and taking things out of the environment
    - Environment
        - Environment sturcture must encod a list or relationships between names and values
        struct lenv {
            int count;
            char** syms;
            lval** vals;
        };
        - functions to create and delete lenv
        - functions to get values from the environment and put values into it
    - Variable Evaluation
        - Evaluation function depends on some environment
    -Builtins
        - Now that evaluation relies on the new function type we need to make sure we can register all of our builtin functions with the environment before we start the interactive prompt
        - need to change the builtin functions to the correct type
            - takes in lenv*
    -Define Function
        - We've only been able to register our builtins as variables. Still no way for users to define their own
        - We'll need a special function that can take in variable names in {}
        - Our define function will take in a list of symbols and a number of valuse and assign each value to each symbol
        
 
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
           
     
        
        
           
        
        
        
        
            
        
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
  
